{
	"info": {
		"_postman_id": "bae8a6cd-0a0a-4089-8632-4d6137ba8f66",
		"name": "Serverest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21118440"
	},
	"item": [
		{
			"name": "/usuários",
			"item": [
				{
					"name": "Cadastrar Usuário",
					"item": [
						{
							"name": "Cadastrar usuário com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.environment.set('idUsuario', response._id)\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário sem sucesso - email cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Este email já está sendo usado\");\r",
											"})\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Este email já está sendo usado')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário sem sucesso - senha vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"})\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['password']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senhaVazia}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário sem sucesso - email vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
											"})\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['email']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{emailVazio}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário sem sucesso - nome vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"})\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['nome']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeVazio}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar usuário sem sucesso - administrador vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"})\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['administrador']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{admVazio}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Listar/Buscar Usuário",
					"item": [
						{
							"name": "Listar usuários com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('quantidade', 'usuarios');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['quantidade', 'usuarios']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por ID com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome\",\"email\",\"password\", \"administrador\", \"_id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['nome', 'email', 'password', 'administrador', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"const postRequest = {\r",
											"  url: `${url}/usuarios`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ \r",
											"        \"nome\": nome,\r",
											"        \"email\": email,\r",
											"        \"password\": password,\r",
											"        \"administrador\": \"true\"\r",
											"    })\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        pm.environment.set('idValido', response.json()._id)\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por ID sem sucesso - ID inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Usuário não encontrado')\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idInvalido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idInvalido}}"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Excluir Usuário",
					"item": [
						{
							"name": "Excluir usuário com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"const postRequest = {\r",
											"  url: `${url}/usuarios`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ \r",
											"        \"nome\": nome,\r",
											"        \"email\": email,\r",
											"        \"password\": password,\r",
											"        \"administrador\": \"true\"\r",
											"    })\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        pm.environment.set('idUsuarioExcluir', response.json()._id)\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Registro excluído com sucesso');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idUsuarioExcluir}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idUsuarioExcluir}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário - id inexistente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Nenhum registro excluído');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Nenhum registro excluído')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idInvalido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idInvalido}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Editar Usuário",
					"item": [
						{
							"name": "Editar usuário com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"const postRequest = {\r",
											"  url: `${url}/usuarios`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ \r",
											"        \"nome\": nome,\r",
											"        \"email\": email,\r",
											"        \"password\": password,\r",
											"        \"administrador\": \"true\"\r",
											"    })\r",
											"  }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', response.json()._id)\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Registro alterado com sucesso');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Registro alterado com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idUsuario}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idUsuario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário - cadastro realizado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idInvalido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idInvalido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário sem sucesso - email cadastrado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Este email já está sendo usado');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Este email já está sendo usado')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"{{emailValido}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idUsuario}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idUsuario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário sem sucesso - nome vazio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('nome não pode ficar em branco');\r",
											"});\r",
											"\r",
											"const atributos = ['nome']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeVazio}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idUsuario}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idUsuario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário sem sucesso - email vazio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('email não pode ficar em branco');\r",
											"});\r",
											"\r",
											"const atributos = ['email']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{emailVazio}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idUsuario}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idUsuario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário sem sucesso - administrador vazio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
											"});\r",
											"\r",
											"const atributos = ['administrador']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{admVazio}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idUsuario}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idUsuario}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário sem sucesso - senha vazia",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"const atributos = ['password']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senhaVazia}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios/{{idUsuario}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios",
										"{{idUsuario}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/login",
			"item": [
				{
					"name": "Realizar login com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"const atributos = ['message', 'authorization']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.message).have.string('Login realizado com sucesso')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Realizar login  sem sucesso - senha vazia",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const atributos = ['password']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"//validação de atributos (conteúdo)\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.password).have.string('password não pode ficar em branco')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaVazia}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Realizar login sem sucesso - email vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const atributos = ['email']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"//validação de atributos (conteúdo)\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.email).have.string('email não pode ficar em branco')\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailVazio}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Realizar login sem sucesso - email e senha vazios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const atributos = ['password', 'email']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.password).have.string('password não pode ficar em branco')\r",
									"})\r",
									"\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.email).have.string('email não pode ficar em branco')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailVazio}}\",\r\n    \"password\": \"{{senhaVazia}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/produtos",
			"item": [
				{
					"name": "Listar/Buscar produtos",
					"item": [
						{
							"name": "Listar produtos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['quantidade', 'produtos']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('nome', 'preco', 'descricao', 'quantidade', '_id');\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['nome', 'preco', 'descricao', 'quantidade', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto por ID (negativo - produto não localizado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Produto não encontrado\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Produto não encontrado')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/produtos/{{idInvalido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idInvalido}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cadastrar Produtos",
					"item": [
						{
							"name": "Cadastrar produto com sucesso",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - nome em branco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['nome']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeVazio}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - nome duplicado",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Já existe produto com esse nome')\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProduto}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - preço vazio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProductName}}\",\r\n  \"preco\": \"{{precoVazio}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - preço  número decimal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um inteiro\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProductName}}\",\r\n  \"preco\": 100.50,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - preço  número negativo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"preco deve ser um número positivo\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProductName}}\",\r\n  \"preco\": -100,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - descrição vazia",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"descricao não pode ficar em branco\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['descricao']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{descriçãoVazia}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - quantidade vazia",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um número\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{quantVazia}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - quantidade número decimal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser um inteiro\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 10.5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - quantidade número negativo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro\")\r",
											"    }\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade deve ser maior ou igual a 0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": -10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto sem sucesso - token ausente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"//validação de atributos (presença)\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProduto}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Editar Produto",
					"item": [
						{
							"name": "Editar Produto com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Registro alterado com sucesso');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Registro alterado com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto - cadastro com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Cadastro realizado com sucesso');\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idInvalido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idInvalido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - produto duplicado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Já existe produto com esse nome');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Já existe produto com esse nome')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProduto}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - preço vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('preco deve ser um número');\r",
											"});\r",
											"\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{precoVazio}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - preço com decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('preco deve ser um inteiro');\r",
											"});\r",
											"\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 90.80,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - preço negativo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('preco deve ser um número positivo');\r",
											"});\r",
											"\r",
											"const atributos = ['preco']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": -90,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - descrição vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('descricao não pode ficar em branco');\r",
											"});\r",
											"\r",
											"const atributos = ['descricao']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{descriçãoVazia}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - quantidade vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('quantidade deve ser um número');\r",
											"});\r",
											"\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{quantVazia}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - quantidade com decimal",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('quantidade deve ser um inteiro');\r",
											"});\r",
											"\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 10.5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - quantidade negativa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('quantidade deve ser maior ou igual a 0');\r",
											"});\r",
											"\r",
											"const atributos = ['quantidade']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": -9\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar Produto sem sucesso - token ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{quantVazia}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Excluir Produto",
					"item": [
						{
							"name": "Excluir Produto com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Registro excluído com sucesso');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir Produto sem sucesso - produto faz parte carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Não é permitido excluir produto que faz parte de carrinho');\r",
											"});\r",
											"\r",
											"const atributos = ['message', 'idCarrinhos']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Não é permitido excluir produto que faz parte de carrinho')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto / cadastrar carrinho\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir Produto sem sucesso  - token inváido/ausente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais');\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//cadastrar usuario\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto\r",
											"const url = pm.environment.get('baseURL');\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"\r",
											"const postRequestCadastro = {\r",
											"    url: `${url}/usuarios`, //variavel\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"//logar usuário e conseguir token\r",
											"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try { \r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        // LOGIN para pegar token       \r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`, \r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json',\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password,\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"       \r",
											"        pm.sendRequest(postRequestLogin, (err, response) => {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try { \r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`, \r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try { \r",
											"                        pm.environment.set('idProdValido', res._id);\r",
											"                        console.log(res._id)\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - idProd')\r",
											"                    }\r",
											"                });\r",
											"\r",
											"            } catch {\r",
											"                console.warn('FAIL - login')\r",
											"            }\r",
											"        });\r",
											"\r",
											"    } catch {\r",
											"        console.warn('FAIL - cadastro')\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos/{{idProdValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos",
										"{{idProdValido}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/carrinho",
			"item": [
				{
					"name": "Listar/Buscar carrinho",
					"item": [
						{
							"name": "Listar carrinhos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"quantidade\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['quantidade', 'carrinhos']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por ID com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"produtos\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['produtos', 'precoTotal', 'quantidadeTotal', 'idUsuario', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto / cadastrar carrinho\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/{{idCarValido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"{{idCarValido}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por ID (negativo - carrinho não encontrado)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Carrinho não encontrado\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Carrinho não encontrado')\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/{{idInvalido}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"{{idInvalido}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cadastrar carrinho",
					"item": [
						{
							"name": "Cadastrar carrinho com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\", \"_id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto \r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProdValido}}\",\r\n      \"quantidade\": 1\r\n    }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho sem sucesso - usuário com mais de um carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Não é permitido ter mais de 1 carrinho')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto \r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProdValido}}\",\r\n      \"quantidade\": \"{{$randomInt}}\"\r\n    }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho sem sucesso - produto não localizado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message', 'item']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Produto não encontrado')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto \r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idInvalido}}\",\r\n      \"quantidade\": \"{{$randomInt}}\"\r\n    }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho sem sucesso - produto insuficiente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message', 'item']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Produto não possui quantidade suficiente')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto \r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = 1\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProdValido}}\",\r\n      \"quantidade\": 5\r\n    }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho sem sucesso - token ausente/inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto \r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProdValido}}\",\r\n      \"quantidade\": \"{{$randomInt}}\"\r\n    }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Excluir carrinho - concluir compra",
					"item": [
						{
							"name": "Excluir carrinho com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto / cadastrar carrinho\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos/concluir-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho sem sucesso - token ausente/inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto / cadastrar carrinho\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos/concluir-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Excluir carrinho e Retornar produtos ao estoque",
					"item": [
						{
							"name": "Excluir carrinho com sucesso e retornar produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Registro excluído com sucesso. Estoque dos produtos reabastecido')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto / cadastrar carrinho\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho sem sucesso - token ausente/inválido Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const atributos = ['message']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"pm.test('Mensagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// variáveis - cadastrar usuario \r",
											"const url = pm.environment.get('baseURL')\r",
											"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"//variáveis - cadastrar produto / cadastrar carrinho\r",
											"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
											"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
											"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
											"\r",
											"//cadastrar usuario\r",
											"const postRequestCadastrar = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',   \r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"//fazer login\r",
											"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        pm.environment.set('idUsuario', res._id)\r",
											"        console.log(res._id)\r",
											"        const postRequestLogin = {\r",
											"            url: `${url}/login`,\r",
											"            method: 'POST',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"            },\r",
											"            body: {\r",
											"                mode: 'raw',\r",
											"                raw: JSON.stringify({\r",
											"                    \"email\": email,\r",
											"                    \"password\": password\r",
											"                })\r",
											"            }\r",
											"        }\r",
											"        // pegar token\r",
											"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
											"            const res = response.json()\r",
											"            console.log(err ? err : res);\r",
											"            try {\r",
											"                pm.environment.set('token', res.authorization.slice(7))\r",
											"                console.log(res.authorization.slice(7))\r",
											"                const token = pm.environment.get('token')\r",
											"                console.log(token)\r",
											"                \r",
											"                //cadastrar produto\r",
											"                const postRequestProd = {\r",
											"                    url: `${url}/produtos`,\r",
											"                    method: 'POST',\r",
											"                    header: {\r",
											"                        'Content-Type': 'application/json',\r",
											"                        'Authorization': `Bearer ${token}`\r",
											"                    },\r",
											"                    body: {\r",
											"                        mode: 'raw',\r",
											"                        raw: JSON.stringify({\r",
											"                            \"nome\": nomeProd,\r",
											"                            \"preco\": preco,\r",
											"                            \"descricao\": descricao,\r",
											"                            \"quantidade\": quantidade\r",
											"                        })\r",
											"                    }\r",
											"                }\r",
											"\r",
											"                \r",
											"                pm.sendRequest(postRequestProd, (err, response) => {\r",
											"                    const res = response.json()\r",
											"                    console.log(err ? err : res);\r",
											"                    try {\r",
											"                        pm.environment.set('idProdValido', res._id)\r",
											"                        console.log(res._id)\r",
											"                        idProd = pm.environment.get('idProdValido')\r",
											"\r",
											"                        //cadastrar carrinho \r",
											"                        const postRequestCarrinho = {\r",
											"                            url: `${url}/carrinhos`,\r",
											"                            method: 'POST',\r",
											"                            header: {\r",
											"                                'Content-Type': 'application/json',\r",
											"                                'Authorization': `Bearer ${token}`\r",
											"                            },\r",
											"                            body: {\r",
											"                                mode: 'raw',\r",
											"                                raw: JSON.stringify({\r",
											"                                    \"produtos\": [\r",
											"                                        {\r",
											"                                        \"idProduto\": `${idProd}`,\r",
											"                                        \"quantidade\": quantidade\r",
											"                                        },\r",
											"                                    ]\r",
											"                                })\r",
											"                            }\r",
											"                        }\r",
											"                        \r",
											"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
											"                            const res = response.json()\r",
											"                            console.log(err ? err : res);\r",
											"                            try {\r",
											"                                //definir variavel idCarrinho\r",
											"                                pm.environment.set('idCarValido', res._id)\r",
											"                                console.log(res._id)\r",
											"                            } catch {\r",
											"                                console.warn('FAIL - cadastro de carrinho')\r",
											"                            }\r",
											"                        })\r",
											"                    } catch {\r",
											"                        console.warn('FAIL - cadastro de produto')\r",
											"                    }\r",
											"                })\r",
											"\r",
											"            } catch{\r",
											"                console.warn(\"FAIL - login\")\r",
											"            }\r",
											"        });\r",
											"    } catch{\r",
											"        console.warn(\"FAIL - cadastro de usuário\")\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Fluxo de compra",
			"item": [
				{
					"name": "Cadastrar usuário com sucesso Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.environment.set('idUsuario', response._id)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"//validação de atributos (presença)\r",
									"const atributos = ['message', '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"//validação de atributos (conteúdo)\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomUserName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/usuarios",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Realizar login com sucesso Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"const atributos = ['message', 'authorization']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.message).have.string('Login realizado com sucesso')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar produto com sucesso Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseURL')\r",
									"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
									"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"\r",
									"const postRequestCadastrar = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"//fazer login\r",
									"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        pm.environment.set('idUsuario', res._id)\r",
									"        const postRequestLogin = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": password\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"            } catch{\r",
									"                console.warn(\"FAIL - login\")\r",
									"            }\r",
									"        });\r",
									"    } catch{\r",
									"        console.warn(\"FAIL - cadastro\")\r",
									"    }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"//validação de atributos (presença)\r",
									"const atributos = ['message', '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//validação de atributos (conteúdo)\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{$randomInt}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/produtos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho com sucesso Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\", \"_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const atributos = ['message', '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//validação de atributos (conteúdo)\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// variáveis - cadastrar usuario \r",
									"const url = pm.environment.get('baseURL')\r",
									"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
									"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"//variáveis - cadastrar produto \r",
									"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"//cadastrar usuario\r",
									"const postRequestCadastrar = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',   \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"//fazer login\r",
									"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        pm.environment.set('idUsuario', res._id)\r",
									"        console.log(res._id)\r",
									"        const postRequestLogin = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": password\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"        // pegar token\r",
									"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"                console.log(res.authorization.slice(7))\r",
									"                const token = pm.environment.get('token')\r",
									"                console.log(token)\r",
									"                \r",
									"                //cadastrar produto\r",
									"                const postRequestProd = {\r",
									"                    url: `${url}/produtos`,\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json',\r",
									"                        'Authorization': `Bearer ${token}`\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                            \"nome\": nomeProd,\r",
									"                            \"preco\": preco,\r",
									"                            \"descricao\": descricao,\r",
									"                            \"quantidade\": quantidade\r",
									"                        })\r",
									"                    }\r",
									"                }\r",
									"\r",
									"                \r",
									"                pm.sendRequest(postRequestProd, (err, response) => {\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"                    try {\r",
									"                        pm.environment.set('idProdValido', res._id)\r",
									"                        console.log(res._id)\r",
									"                        idProd = pm.environment.get('idProdValido')\r",
									"\r",
									"                        } catch {\r",
									"                        console.warn('FAIL - cadastro de produto')\r",
									"                    }\r",
									"                })\r",
									"\r",
									"            } catch{\r",
									"                console.warn(\"FAIL - login\")\r",
									"            }\r",
									"        });\r",
									"    } catch{\r",
									"        console.warn(\"FAIL - cadastro de usuário\")\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProdValido}}\",\r\n      \"quantidade\": 1\r\n    }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir carrinho com sucesso Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const atributos = ['message']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"//validação de atributos (conteúdo)\r",
									"pm.test('Mensagem correta retornada', () => {\r",
									"    pm.expect(response.message).have.string('Registro excluído com sucesso')\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// variáveis - cadastrar usuario \r",
									"const url = pm.environment.get('baseURL')\r",
									"const name = pm.variables.replaceIn('{{$randomUserName}}')\r",
									"const email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"const password = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"//variáveis - cadastrar produto / cadastrar carrinho\r",
									"const nomeProd = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"const preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"const descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"const quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"//cadastrar usuario\r",
									"const postRequestCadastrar = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',   \r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									"//fazer login\r",
									"pm.sendRequest(postRequestCadastrar, (err, response) => {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        pm.environment.set('idUsuario', res._id)\r",
									"        console.log(res._id)\r",
									"        const postRequestLogin = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": password\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"        // pegar token\r",
									"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"                console.log(res.authorization.slice(7))\r",
									"                const token = pm.environment.get('token')\r",
									"                console.log(token)\r",
									"                \r",
									"                //cadastrar produto\r",
									"                const postRequestProd = {\r",
									"                    url: `${url}/produtos`,\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json',\r",
									"                        'Authorization': `Bearer ${token}`\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                            \"nome\": nomeProd,\r",
									"                            \"preco\": preco,\r",
									"                            \"descricao\": descricao,\r",
									"                            \"quantidade\": quantidade\r",
									"                        })\r",
									"                    }\r",
									"                }\r",
									"\r",
									"                \r",
									"                pm.sendRequest(postRequestProd, (err, response) => {\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"                    try {\r",
									"                        pm.environment.set('idProdValido', res._id)\r",
									"                        console.log(res._id)\r",
									"                        idProd = pm.environment.get('idProdValido')\r",
									"\r",
									"                        //cadastrar carrinho \r",
									"                        const postRequestCarrinho = {\r",
									"                            url: `${url}/carrinhos`,\r",
									"                            method: 'POST',\r",
									"                            header: {\r",
									"                                'Content-Type': 'application/json',\r",
									"                                'Authorization': `Bearer ${token}`\r",
									"                            },\r",
									"                            body: {\r",
									"                                mode: 'raw',\r",
									"                                raw: JSON.stringify({\r",
									"                                    \"produtos\": [\r",
									"                                        {\r",
									"                                        \"idProduto\": `${idProd}`,\r",
									"                                        \"quantidade\": quantidade\r",
									"                                        },\r",
									"                                    ]\r",
									"                                })\r",
									"                            }\r",
									"                        }\r",
									"                        \r",
									"                        pm.sendRequest(postRequestCarrinho, (err, response) => {\r",
									"                            const res = response.json()\r",
									"                            console.log(err ? err : res);\r",
									"                            try {\r",
									"                                //definir variavel idCarrinho\r",
									"                                pm.environment.set('idCarValido', res._id)\r",
									"                                console.log(res._id)\r",
									"                            } catch {\r",
									"                                console.warn('FAIL - cadastro de carrinho')\r",
									"                            }\r",
									"                        })\r",
									"                    } catch {\r",
									"                        console.warn('FAIL - cadastro de produto')\r",
									"                    }\r",
									"                })\r",
									"\r",
									"            } catch{\r",
									"                console.warn(\"FAIL - login\")\r",
									"            }\r",
									"        });\r",
									"    } catch{\r",
									"        console.warn(\"FAIL - cadastro de usuário\")\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/carrinhos/concluir-compra",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}